{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","tittle","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAC7FH,GAFiB,sBAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,OAAQF,EAAIG,MACZX,IAAG,UAAEQ,EAAII,cAAN,aAAE,EAAYC,iBAAiBb,QAXnB,kBAcZM,GAdY,4CAAH,sDCEPQ,EAAc,SAAC,GAA2B,IAAxBL,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,OAAQV,EAAW,EAAXA,IAEvC,OADAe,QAAQC,IAAI,CAACP,KAAIC,SAAQV,QAErB,sBAAKiB,UAAU,yCAAf,UACI,qBAAKC,IAAMlB,EAAMmB,IAAMT,IACvB,4BAAKA,QCHJU,EAAU,SAAC,GAAkB,IAAhBtB,EAAe,EAAfA,SAEtB,ECFwB,SAAEA,GAC5B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNgB,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAU,WAEJ3B,EAAQC,GACH2B,MAAM,SAAAC,GACHH,EAAS,CACLlB,KAAMqB,EACNL,SAAS,SAIxB,CAACvB,IAGGwB,EDjB4BK,CAAa7B,GAAjCc,EAAb,EAAQP,KAAagB,EAArB,EAAqBA,QAEvB,OACE,qCACE,6BAAKvB,IACDuB,GAAW,wCACf,qBAAKJ,UAAU,YAAf,SACGL,EAAOL,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEVnBmB,EAAe,WAC1B,MAAoC5C,mBAAS,CAAC,KAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAEA,OACE,qCACE,6CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEI8C,EAAWtB,KAAM,SAAAT,GAAQ,OACvB,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,MCVnBgC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.aaba4efe.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}\n","export const getGifs = async ( category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=YYfpEsSQt9tuUZkPHvraAxCbghWhiw5e&q=${encodeURI(\n      category\n    )}&limit=10`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map((img) => {\n      return {\n        id: img.id,\n        tittle: img.title,\n        url: img.images?.downsized_medium.url,\n      };\n    });\n    return gifs;\n  };\n","import React from 'react'\n\nexport const GifGridItem = ( { id, tittle, url } ) => {\n    console.log({id, tittle, url})\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n            <img src={ url } alt={ tittle }></img>\n            <p>{ tittle }</p>\n        </div>\n    )\n}\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n\n    const { data:images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n        { loading && <p>Loading</p> }\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\"\n\n\nexport const useFetchGifs = ( category ) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n\n        getGifs(category)\n            .then( imgs => {\n                setstate({ \n                    data: imgs,\n                    loading: false,\n                })\n            })\n\n  }, [category])\n\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(['']);\n\n  return (\n    <>\n      <h2>GifExperApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {\n          categories.map ( category => (\n            <GifGrid \n              key={category}\n              category={category}\n            />\n          ))\n        }\n      </ol>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}